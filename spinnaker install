#Install update awscli

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

# Install kubectl 

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl

chmod +x ./kubectl

sudo mv ./kubectl /usr/bin/kubectl

curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator

chmod +x ./aws-iam-authenticator

mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH

echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

aws-iam-authenticator  help

# Install eksctl 

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/bin
eksctl version

# Install terraform
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

# Install halvyard
yum install java -y 
curl -O https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh
sudo bash InstallHalyard.sh
sudo update-halyard
hal -v

# Create the Production Amazon EKS cluster

eksctl create cluster --name=eks-prod --nodes=3 --region=us-east-1 \
  --write-kubeconfig=false --instance-types=m5a.large

# Create the UAT Amazon EKS cluster

eksctl create cluster --name=eks-uat --nodes=3 --region=us-east-1 \
  --write-kubeconfig=false --instance-types=m5a.large

# Create the Spinnaker Amazon EKS cluster

eksctl create cluster --name=eks-spinnaker --nodes=2 --region=us-east-2 \
 --write-kubeconfig=false --instance-types=m5a.large

# Retrieve Amazon EKS cluster kubectl contexts

aws eks update-kubeconfig --name eks-spinnaker --region us-east-2 --alias eks-spinnaker

aws eks update-kubeconfig --name eks-uat --region us-east-1 --alias eks-uat

aws eks update-kubeconfig --name eks-prod --region us-east-1 --alias eks-prod

# Create and configure a Docker registry

hal config provider docker-registry enable 

hal config provider docker-registry account add sandeep-docker --address index.docker.io --username drdead --password
#Coffee@976   , drdead is username

#  Add and configure a GitHub account

hal config artifact github enable

hal config artifact github account add spinnaker-github --username Aneecket --password --token

Coffee@4325
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

# Add and configure Kubernetes accounts

hal config provider kubernetes enable

kubectl config use-context eks-prod

CONTEXT=$(kubectl config current-context)

kubectl apply --context $CONTEXT -f https://spinnaker.io/downloads/kubernetes/service-account.yml



TOKEN=$(kubectl get secret --context $CONTEXT \
   $(kubectl get serviceaccount spinnaker-service-account \
       --context $CONTEXT \
       -n spinnaker \
       -o jsonpath='{.secrets[0].name}') \
   -n spinnaker \
   -o jsonpath='{.data.token}' | base64 --decode)


kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN

kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user

hal config provider kubernetes account add eks-prod --provider-version v2 \
 --docker-registries sandeep-docker --context $CONTEXT


#UAT Amazon EKS account:

kubectl config use-context eks-uat 

CONTEXT=$(kubectl config current-context) 

kubectl apply --context $CONTEXT \
    -f https://spinnaker.io/downloads/kubernetes/service-account.yml

TOKEN=$(kubectl get secret --context $CONTEXT \
   $(kubectl get serviceaccount spinnaker-service-account \
       --context $CONTEXT \
       -n spinnaker \
       -o jsonpath='{.secrets[0].name}') \
   -n spinnaker \
   -o jsonpath='{.data.token}' | base64 --decode)

kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN

kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user

hal config provider kubernetes account add eks-uat --provider-version v2 \
 --docker-registries sandeep-docker --context $CONTEXT


#Spinnaker Amazon EKS account:

kubectl config use-context eks-spinnaker 

CONTEXT=$(kubectl config current-context)

kubectl apply --context $CONTEXT \
    -f https://spinnaker.io/downloads/kubernetes/service-account.yml


TOKEN=$(kubectl get secret --context $CONTEXT \
   $(kubectl get serviceaccount spinnaker-service-account \
       --context $CONTEXT \
       -n spinnaker \
       -o jsonpath='{.secrets[0].name}') \
   -n spinnaker \
   -o jsonpath='{.data.token}' | base64 --decode)

kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN
kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user

hal config provider kubernetes account add eks-spinnaker --provider-version v2 \
 --docker-registries sandeep-docker  --context $CONTEXT

# Enable artifact support
 hal config features edit --artifacts true

# Configure Spinnaker to install in Kubernetes

hal config deploy edit --type distributed --account-name eks-spinnaker

# Configure Spinnaker to use AWS S3

export YOUR_ACCESS_KEY_ID=AKIASTTE2P53GBXZTT44

hal config storage s3 edit --access-key-id $YOUR_ACCESS_KEY_ID \
 --secret-access-key --region us-east-2


# c85KMgBIsUrkHjm+tC8huHqBQSk4rAMcX+RVEfFm


hal config storage edit --type s3

# Choose the Spinnaker version
hal version list

 export VERSION=1.24.6

hal config version edit --version $VERSION
  

hal deploy apply
kubectl -n spinnaker get svc

# Expose Spinnaker using Elastic Loadbalancer

export NAMESPACE=spinnaker

kubectl -n ${NAMESPACE} expose service spin-gate --type LoadBalancer \
  --port 80 --target-port 8084 --name spin-gate-public 

kubectl -n ${NAMESPACE} expose service spin-deck --type LoadBalancer \
  --port 80 --target-port 9000 --name spin-deck-public  

export API_URL=$(kubectl -n $NAMESPACE get svc spin-gate-public \
 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}') 

export UI_URL=$(kubectl -n $NAMESPACE get svc spin-deck-public   -o jsonpath='{.status.loadBalancer.ingress[0].hostname}') 

hal config security api edit --override-base-url http://${API_URL} 

hal config security ui edit --override-base-url http://${UI_URL}

hal deploy apply


kubectl -n spinnaker get svc

##### Using a browser, log in to the Spinnaker UI using the spin-deck-public services endpoint as shown above.

